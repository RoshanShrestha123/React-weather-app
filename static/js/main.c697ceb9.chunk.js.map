{"version":3,"sources":["assects/mist-night.png","components/iconComponent/IconComponent.js","components/weather-display/WeatherDisplay.js","components/header/Header.js","components/BgImage/BgImage.js","components/main/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","IconComponent","props","iconId","icon","image","className","alt","src","WeatherDisplay","kel_to_cel","temp","data","main","description","Header","currentDate","Date","getDay","BgImage","mistNight","Component","Main","state","dataLoaded","fetch","then","response","json","setState","newdata","this","console","log","weather","map","weatherData","key","id","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uGAAAA,EAAOC,QAAU,IAA0B,wC,sTCa5BC,MATf,SAAuBC,GACnB,IAAIC,EAASD,EAAME,KACfC,EAAM,oCAAoCF,EAAO,OACrD,OACI,yBAAKG,UAAU,eACX,yBAAKA,UAAU,OAAOC,IAAKJ,EAAQK,IAAKH,M,MCQrCI,MAbf,SAAwBP,GACpB,IAAIQ,EAAaR,EAAMS,KAAO,OAC9B,OACI,yBAAKL,UAAU,mBACX,kBAAC,EAAD,CAAMF,KAAMF,EAAMU,KAAKR,OACvB,wBAAIE,UAAU,QAAQI,EAAtB,eAGA,4BAAKR,EAAMU,KAAKC,KAAhB,KACA,0BAAMP,UAAU,QAAhB,IAAyBJ,EAAMU,KAAKE,YAApC,O,MCOGC,MAjBf,WACI,IACIC,GAAa,IAAIC,MAAOC,SAE5B,OAEQ,yBAAKZ,UAAU,UACf,wBAAIA,UAAU,YAAd,cACA,wBAAIA,UAAU,QAPT,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAO7CU,MCGxBG,G,6LARP,OACI,yBAAKb,UAAU,WACX,yBAAKE,IAAKY,W,GAJJC,cCmDPC,E,YAhDX,aAAc,IAAD,8BACT,+CACKC,MAAM,CACPX,KAAK,KACLY,YAAW,GAJN,E,iFAOO,IAAD,OAGfC,MAAM,qGACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAd,GAAS,EAAKiB,SAAS,CACzBjB,KAAKA,EACLY,YAAW,S,+BAKd,IAAD,OACAM,EAAU,KACd,OAAGC,KAAKR,MAAMC,YACVQ,QAAQC,IAAIF,KAAKR,MAAMX,MACvBkB,EAAUC,KAAKR,MAAMX,KAAKsB,QAAQC,KAAI,SAAAC,GAClC,OACI,kBAAC,EAAD,CAASC,IAAKD,EAAYE,GAAI1B,KAAMwB,EAAazB,KAAM,EAAKY,MAAMX,KAAKC,KAAKF,UAWpF,yBAAKL,UAAU,gBACX,kBAAC,EAAD,MACA,kBAAC,EAAD,MAECwB,IATD,4C,GAhCGT,aCOJkB,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,MAAK,SAAA0B,GACjCA,EAAaC,kB","file":"static/js/main.c697ceb9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mist-night.9a11f245.png\";","import React from 'react';\nimport './iconComponent.css';\nimport MistNight from '../../assects/mist-night.png';\n\nfunction IconComponent(props){\n    let iconId = props.icon;\n    let image=\"http://openweathermap.org/img/wn/\"+iconId+\".png\";\n    return(\n        <div className=\"icon-holder\">\n            <img className=\"icon\" alt={iconId} src={image}></img>\n        </div>\n    )\n}\nexport default IconComponent;","import React from 'react';\nimport Icon from '../iconComponent/IconComponent';\nimport './weatherDisplay.css';\n\nfunction WeatherDisplay(props){\n    let kel_to_cel = props.temp - 273.15;\n    return(\n        <div className=\"weather-wrapper\">\n            <Icon icon={props.data.icon}/>\n            <h1 className=\"temp\">{kel_to_cel} \t&#8451;   </h1>\n           \n            \n            <h3>{props.data.main} </h3>\n            <span className=\"desc\">\"{props.data.description}\"</span>\n        </div>\n    )\n}\nexport default WeatherDisplay;","import React from 'react';\nimport './Header.css';\n\nfunction Header(){\n    const days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n    let currentDate= new Date().getDay();\n \n    return (\n\n            <div className=\"header\">\n            <h3 className=\"location\"> Kathmandu</h3>\n            <h3 className=\"time\">{days[currentDate]}</h3>\n            \n        </div>\n        \n   \n        \n        \n    )\n}\nexport default Header;","import React,{ Component} from 'react';\nimport mistNight from '../../assects/mist-night.png'\nimport './BGImage.css';\n\nclass BgImage extends Component{\n    render(){\n        return(\n            <div className=\"bgImage\">\n                <img src={mistNight}/>\n            </div>\n            \n        )\n    }\n}\nexport default BgImage;","import React,{ Component}from 'react';\nimport Weather from '../weather-display/WeatherDisplay';\nimport Header from '../header/Header';\nimport './Main.css';\nimport BgImage from '../BgImage/BgImage';\n\nclass Main extends Component{\n    constructor(){\n        super();\n        this.state={\n            data:null,\n            dataLoaded:false\n        }\n    }\n    componentDidMount(){\n        const KEY = 'd31f12047476d77a5e4c35ccaaa10fed';\n        const KATHMANDU_ID =  '1283240';\n        fetch('https://api.openweathermap.org/data/2.5/weather?id=' + KATHMANDU_ID+ '&appid=' + KEY)\n            .then(response => response.json())\n            .then(data => {this.setState({\n                data:data,\n                dataLoaded:true\n            })\n        });\n    }\n\n    render(){\n        let newdata = null;\n        if(this.state.dataLoaded){\n            console.log(this.state.data)\n            newdata = this.state.data.weather.map(weatherData => {\n                return(\n                    <Weather key={weatherData.id} data={weatherData} temp={this.state.data.main.temp}/>  \n                    )\n            })\n           \n        }else{\n            return(\n                <p>Loading..</p>\n            )\n            \n        }\n        return(\n            <div className=\"main-wrapper\">\n                <BgImage/>\n                <Header/>\n                \n                {newdata}\n                \n            </div>\n            \n        )\n        \n    }\n}\nexport default Main;\n","import React from 'react';\n\nimport './App.css';\nimport Main from './components/main/Main';\n\nfunction App() {\n  return (\n    <div >\n      <Main/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}